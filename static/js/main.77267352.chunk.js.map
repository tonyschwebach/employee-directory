{"version":3,"sources":["logo.svg","components/Banner/Banner.jsx","components/Search/Search.jsx","utils/API.js","components/Employee/Employee.jsx","containers/EmployeeGrid/EmployeeGrid.jsx","containers/EmployeeDirectory/EmployeeDirectory.jsx","App.js","reportWebVitals.js","index.js"],"names":["Banner","className","Search","props","onSubmit","handleFormSubmit","onChange","handleInputChange","value","name","type","placeholder","id","url","numberOfEmployees","axios","get","Employee","picture","phone","email","dob","alt","first","last","src","thumbnail","moment","date","format","EmployeeGrid","onClick","handleClick","data-order","sortOrder","employeesToDisplay","length","map","employee","EmployeeDirectory","state","employees","searchTerm","event","target","setState","preventDefault","sortEmployees","order","sortedEmployees","sort","a","b","nameA","toLowerCase","nameB","filterEmployees","filter","includes","API","then","res","data","results","catch","err","console","log","this","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uUAAe,I,kBCkBAA,EAfA,WACb,OACE,qBAAKC,UAAU,OAAf,SACA,sBAAKA,UAAU,YAAf,UACE,oBAAIA,UAAU,QAAd,gCAGA,oBAAIA,UAAU,WAAd,kF,uCCqBSC,G,MArBA,SAACC,GACd,OACE,sBACEF,UAAU,2BACVG,SAAUD,EAAME,iBAFlB,SAIE,qBAAKJ,UAAU,yBAAf,SACE,uBACEK,SAAUH,EAAMI,kBAChBC,MAAOL,EAAMK,MACbC,KAAK,aACLC,KAAK,OACLT,UAAU,qBACVU,YAAY,gCACZC,GAAG,iB,iBCrBPC,EAAM,iFAEG,EACC,WAAkC,IAAxBC,EAAuB,uDAAJ,GACzC,OAAOC,IAAMC,IAAIH,EAAIC,I,yBCeVG,G,MAfE,SAAC,GAA6C,EAA3CL,GAA4C,IAAxCM,EAAuC,EAAvCA,QAAST,EAA8B,EAA9BA,KAAMU,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IACnD,OAEE,cADA,CACA,gBACE,oBAAIpB,UAAU,eAAd,SACE,qBAAKqB,IAAG,8BAAyBb,EAAKc,MAA9B,YAAuCd,EAAKe,MAAQC,IAAKP,EAAQQ,cAE3E,oBAAIzB,UAAU,eAAd,mBAAiCQ,EAAKc,MAAtC,YAA+Cd,EAAKe,QACpD,oBAAIvB,UAAU,eAAd,SAA8BkB,IAC9B,oBAAIlB,UAAU,eAAd,SAA8BmB,IAC9B,oBAAInB,UAAU,eAAd,SAA8B0B,IAAON,EAAIO,MAAMC,OAAO,mBCmB7CC,G,MAhCM,SAAC3B,GACpB,OAEE,cADA,CACA,SAAOF,UAAU,uDAAjB,UACE,uBAAOW,GAAG,iBAAV,SAEE,+BACE,yCACA,qBAAIA,GAAG,eAAP,iBACE,wBAAQA,GAAG,cAAcmB,QAAS5B,EAAM6B,YAAxC,SAAsD,mBAAGC,aAAa9B,EAAM+B,UAAWjC,UAA6B,QAAlBE,EAAM+B,UAAmB,yBAAyB,kCAEtJ,uCACA,uCACA,0CAMJ,gCACG/B,EAAMgC,mBAAmBC,OAAS,EACjCjC,EAAMgC,mBAAmBE,KAAI,SAACC,GAAD,OAC3B,cAAC,EAAD,eAAsCA,GAAvBA,EAAS1B,GAAGJ,UAG7B,6BAAI,kEC8FC+B,G,kNAjHbC,MAAQ,CAAEC,UAAW,GAAIP,UAAW,MAAOQ,WAAY,I,EAiBvDnC,kBAAoB,SAACoC,GACnB,IAAMnC,EAAQmC,EAAMC,OAAOpC,MACrBC,EAAOkC,EAAMC,OAAOnC,KAE1B,EAAKoC,SAAL,eACGpC,EAAOD,K,EAKZH,iBAAmB,SAACsC,GAClBA,EAAMG,kB,EAIRd,YAAc,SAACW,GAGgB,QAAzB,EAAKH,MAAMN,YACb,EAAKW,SAAS,CAAEX,UAAW,SAE3B,EAAKa,cAAc,SAEQ,SAAzB,EAAKP,MAAMN,YACb,EAAKW,SAAS,CAAEX,UAAW,QAE3B,EAAKa,cAAc,S,EAUvBA,cAAgB,WAAoB,IAAnBC,EAAkB,uDAAV,MACjBC,EAAkB,EAAKT,MAAMC,UAAUS,MAAK,SAACC,EAAGC,GACpD,IAAIC,EAAK,UAAMF,EAAE1C,KAAKc,MAAM+B,cAAnB,aAAqCH,EAAE1C,KAAKe,KAAK8B,eACtDC,EAAK,UAAMH,EAAE3C,KAAKc,MAAM+B,cAAnB,aAAqCF,EAAE3C,KAAKe,KAAK8B,eAE1D,OACGD,EAAQE,GAAmB,QAAVP,GACjBK,EAAQE,GAAmB,SAAVP,GAEV,EAGPK,EAAQE,GAAmB,QAAVP,GACjBK,EAAQE,GAAmB,SAAVP,EAEX,EAEF,KAGT,EAAKH,SAAS,CAAEJ,UAAWQ,K,EAI7BO,gBAAkB,WAchB,OAb0B,EAAKhB,MAAMC,UAAUgB,QAAO,SAACnB,GACrD,OACEA,EAAS7B,KAAKc,MACX+B,cACAI,SAAS,EAAKlB,MAAME,WAAWY,gBAClChB,EAAS7B,KAAKe,KACX8B,cACAI,SAAS,EAAKlB,MAAME,WAAWY,gBAClChB,EAASlB,MAAMsC,SAAS,EAAKlB,MAAME,WAAWY,gBAC9ChB,EAASnB,MAAMuC,SAAS,EAAKlB,MAAME,gB,uDApFzC,WAAqB,IAAD,OAElBiB,EAD0B,IAEvBC,MAAK,SAACC,GAEL,EAAKhB,SAAS,CAAEJ,UAAWoB,EAAIC,KAAKC,UACpC,EAAKhB,cAAc,EAAKP,MAAMN,cAE/B8B,OAAM,SAACC,GACNC,QAAQC,IAAIF,Q,oBAkFlB,WACE,OACE,sBAAKhE,UAAU,sBAAf,UACE,cAAC,EAAD,CACEO,MAAO4D,KAAK5B,MAAME,WAClBnC,kBAAmB6D,KAAK7D,kBACxBF,iBAAkB+D,KAAK/D,mBAGzB,cAAC,EAAD,CACE8B,mBAAoBiC,KAAKZ,kBACzBtB,UAAWkC,KAAK5B,MAAMN,UACtBF,YAAaoC,KAAKpC,qB,GA5GIqC,cCOjBC,MAVf,WACE,OACE,sBAAKrE,UAAU,MAAf,UACA,cAAC,EAAD,IAEA,cAAC,EAAD,QCEWsE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.77267352.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\r\nimport \"./Banner.css\";\r\n\r\nconst Banner = () => {\r\n  return (\r\n    <div className=\"hero\">\r\n    <div className=\"hero-body\">\r\n      <h1 className=\"title\">\r\n        Employee Directory\r\n      </h1>\r\n      <h3 className=\"subtitle\">\r\n        Sort by name and/or use the search box to filter your results.\r\n      </h3>\r\n    </div>\r\n  </div>\r\n  );\r\n};\r\n\r\nexport default Banner;","// rsc component\r\n// state for search\r\n// componentDidMount?\r\n// onChange\r\n// no onSubmit in example\r\n// render search box\r\n\r\nimport React from \"react\";\r\nimport \"./Search.css\";\r\n\r\nconst Search = (props) => {\r\n  return (\r\n    <form\r\n      className=\"columns my-6 is-centered\"\r\n      onSubmit={props.handleFormSubmit}\r\n    >\r\n      <div className=\"form-group column is-5\">\r\n        <input\r\n          onChange={props.handleInputChange}\r\n          value={props.value}\r\n          name=\"searchTerm\"\r\n          type=\"text\"\r\n          className=\"form-control input\"\r\n          placeholder=\"Search Name, Phone#, or Email\"\r\n          id=\"search\"\r\n        />\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","// make api call to randomuser.me to return a list of employees\r\nimport axios from \"axios\";\r\n// const numberEmployees = 50;\r\nconst url = \"https://randomuser.me/api/?inc=id,picture,name,phone,email,dob&nat=us&results=\";\r\n\r\nexport default {\r\n  getEmployees: function (numberOfEmployees =50) {\r\n    return axios.get(url+numberOfEmployees);\r\n  },\r\n};\r\n","// rsc component\r\n\r\nimport moment from \"moment\";\r\nimport React from \"react\";\r\nimport \"./Employee.css\";\r\n\r\n// deconstruct props for image, name, phone, email, and DOB\r\nconst Employee = ({ id, picture, name, phone, email, dob }) => {\r\n  return (\r\n    // render table row with table table data for each field\r\n    <tr>\r\n      <td className=\"is-vcentered\">\r\n        <img alt={`employee picture of ${name.first} ${name.last}`} src={picture.thumbnail} />\r\n      </td>\r\n      <td className=\"is-vcentered\">{`${name.first} ${name.last}`}</td>\r\n      <td className=\"is-vcentered\">{phone}</td>\r\n      <td className=\"is-vcentered\">{email}</td>\r\n      <td className=\"is-vcentered\">{moment(dob.date).format(\"M/D/YYYY\")}</td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default Employee;\r\n","import React from \"react\";\r\nimport Employee from \"../../components/Employee/Employee\";\r\nimport \"./EmployeeGrid.css\";\r\n\r\nconst EmployeeGrid = (props) => {\r\n  return (\r\n    //  {/* render table and table headings */}\r\n    <table className=\"table is-striped is-narrow is-hoverable is-fullwidth\">\r\n      <thead id=\"table-headings\" >\r\n\r\n        <tr>\r\n          <th>Picture</th>\r\n          <th id=\"name-heading\">Name  \r\n            <button id=\"sort-button\" onClick={props.handleClick} ><i data-order ={props.sortOrder} className={props.sortOrder===\"asc\"? \"fas fa-sort-alpha-down\":\"fas fa-sort-alpha-up-alt\"}></i></button>\r\n          </th>\r\n          <th>Phone</th>\r\n          <th>Email</th>\r\n          <th>DOB</th>\r\n        </tr>\r\n      </thead>\r\n\r\n      {/* TODO: make table headings always viewable */}\r\n      {/* map over state of employees to render Employee components (reference activity 16 - friends) */}\r\n      <tbody>\r\n        {props.employeesToDisplay.length > 0 ? (\r\n          props.employeesToDisplay.map((employee) => (\r\n            <Employee key={employee.id.value} {...employee} />\r\n          ))\r\n        ) : (\r\n          <tr><td>No employees to display</td></tr>\r\n        )}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default EmployeeGrid;\r\n","// onClick for table headings to setState of sortOrder\r\n\r\nimport React, { Component } from \"react\";\r\nimport Search from \"../../components/Search/Search\";\r\nimport API from \"../../utils/API\";\r\nimport EmployeeGrid from \"../EmployeeGrid/EmployeeGrid\";\r\nimport \"./EmployeeDirectory.css\";\r\n\r\nclass EmployeeDirectory extends Component {\r\n  // rcc component state for list of employees, sortOrder, searchTerm\r\n  state = { employees: [], sortOrder: \"asc\", searchTerm: \"\" };\r\n\r\n  // componentDidMount renders grid\r\n  componentDidMount() {\r\n    const numberOfEmployees = 50; //else .getEmployees defaults to 50\r\n    API.getEmployees(numberOfEmployees)\r\n      .then((res) => {\r\n        // set an unchanging list of employees\r\n        this.setState({ employees: res.data.results });\r\n        this.sortEmployees(this.state.sortOrder);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }\r\n\r\n  // handle input change of search bar\r\n  handleInputChange = (event) => {\r\n    const value = event.target.value;\r\n    const name = event.target.name;\r\n\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  // handle search form submit search bar\r\n  handleFormSubmit = (event) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  // handle click for user choosing to sort by name\r\n  handleClick = (event) => {\r\n\r\n    // console.log(\"before if block \" + this.state.sortOrder);\r\n    if (this.state.sortOrder === \"asc\") {\r\n      this.setState({ sortOrder: \"desc\" });\r\n      // console.log(\"after if set state to desc \" + this.state.sortOrder);\r\n      this.sortEmployees(\"desc\");\r\n    }\r\n    if (this.state.sortOrder === \"desc\") {\r\n      this.setState({ sortOrder: \"asc\" });\r\n      // console.log(\"after if set state to asc \" + this.state.sortOrder);\r\n      this.sortEmployees(\"asc\");\r\n    }\r\n\r\n    // console.log(\"after if blocks \" + this.state.sortOrder);\r\n    // this.sortEmployees(this.state.sortOrder);\r\n  };\r\n\r\n  // function to sort employees ascending by name. default ascending order\r\n  // sort by name\r\n  /* asc or desc based on state.sortOrder */\r\n  sortEmployees = (order = \"asc\") => {\r\n    const sortedEmployees = this.state.employees.sort((a, b) => {\r\n      let nameA = `${a.name.first.toLowerCase()}  ${a.name.last.toLowerCase()}`;\r\n      let nameB = `${b.name.first.toLowerCase()}  ${b.name.last.toLowerCase()}`;\r\n      // sort for ascending or descending\r\n      if (\r\n        (nameA < nameB && order === \"asc\") ||\r\n        (nameA > nameB && order === \"desc\")\r\n      ) {\r\n        return -1;\r\n      }\r\n      if (\r\n        (nameA > nameB && order === \"asc\") ||\r\n        (nameA < nameB && order === \"desc\")\r\n      ) {\r\n        return 1;\r\n      }\r\n      return 0;\r\n    });\r\n    // console.log(\"in sort function. orderby is \" + this.state.sortOrder + order);\r\n    this.setState({ employees: sortedEmployees });\r\n  };\r\n\r\n  // Filter this.state.employees for employess without a name, email, or phone number containing the search term\r\n  filterEmployees = () => {\r\n    const filteredEmployees = this.state.employees.filter((employee) => {\r\n      return (\r\n        employee.name.first\r\n          .toLowerCase()\r\n          .includes(this.state.searchTerm.toLowerCase()) ||\r\n        employee.name.last\r\n          .toLowerCase()\r\n          .includes(this.state.searchTerm.toLowerCase()) ||\r\n        employee.email.includes(this.state.searchTerm.toLowerCase()) ||\r\n        employee.phone.includes(this.state.searchTerm)\r\n      );\r\n    });\r\n\r\n    return filteredEmployees;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container mt-6 px-6\">\r\n        <Search\r\n          value={this.state.searchTerm}\r\n          handleInputChange={this.handleInputChange}\r\n          handleFormSubmit={this.handleFormSubmit}\r\n        />\r\n        {/* pass result of the filteredEmployees function as a prop to the employee grid component  */}\r\n        <EmployeeGrid\r\n          employeesToDisplay={this.filterEmployees()}\r\n          sortOrder={this.state.sortOrder}\r\n          handleClick={this.handleClick}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EmployeeDirectory;\r\n","import logo from './logo.svg';\nimport './App.css';\nimport Banner from './components/Banner/Banner';\nimport EmployeeGrid from './containers/EmployeeDirectory/EmployeeDirectory';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Banner />\n    {/* Search component */}\n    <EmployeeGrid />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}